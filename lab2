package com.company;
//33 58 83 108 138
import java.util.Arrays;
import java.util.Scanner;
import java.util.function.Supplier;
import java.util.stream.DoubleStream;

public class Main {
    public static void main(String[] args) {

        task1();
        task2();
        task3();
        task4();
        task5();
    }

//Последовательность вещественных чисел оканчивается нулем. Найти количество членов этой последовательности.
    public static void task1() {
        arrayStatistics(new double[]{1, 2, 3, 5, 7, 13, 17, 23, 11, 0, -11, -7, -5} );
    }
    public static void arrayStatistics(double[] p) {
        System.out.println("Array " + Arrays.toString(p));
        Supplier<DoubleStream> sup = () -> Arrays.stream(p);
        long a = sup.get().filter(i -> i == 0).count();
        long b = sup.get().filter(i -> i < 0).count();
        long c = sup.get().filter(i -> i > 0).count();
        System.out.println(" equals 0 = "+ a);
        System.out.println(" less then 0 = " + b);
        System.out.println(" over then 0 = "+ c);
    }

//Даны два вектора {хi}, {уi}, i = 1, ..., 10, упорядоченные по возрастанию. Объединить их в один вектор {zi}, i = 1, ..., 20, так чтобы сохранилась упорядоченность.
    public static void task2() {
        System.out.println(Arrays.toString(mergeArrays(new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10},new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20})));
    }

    public static int[] mergeArrays(int[] a, int[] b) {
        int[] c = new int[a.length + b.length];

        int i = 0, j = 0;
        for (int k = 0; k < c.length; k++) {
            if ((i > a.length - 1) || (a[i] > b[j])) {
                c[k] = b[j];
                j++;
            } else if ((j > b.length - 1) || (a[i] < b[j])) {
                c[k] = a[i];
                i++;
            } else {
                c[k] = b[j];
                j++;
            }
        }
        return c;
    }

//Дана последовательность натуральных чисел а1, a2, ..., а20. Определить, есть ли в последовательности хотя
// бы одна пара соседних нечетных чисел. В случае положительного ответа определить порядковые номера чисел первой из таких пар.
    public static void task3() {
        int[] array = new int[]{1, 2, 2, 3, 5, 6, 7, 8, 9, 10, 13, 22, 15, 26, 56};
//        int[] array = new int[15];
//        for (int i = 0; i < array.length; i++) {
//            array[i] = (int) Math.round((Math.random() * 30));
//        }
            boolean flag = true;
            for (int i = 0; i < array.length - 1; i++)
                if (array[i] % 2 != 0) {
                    if ((array[i] == array[i + 1] + 2) || (array[i + 1] == array[i] + 2)) {
                        System.out.printf("Два соседних нечетных числа %d и %d в позиции %d", array[i], array[i + 1], i);
                        flag = false;
                        break;
                    }
                }
            if (flag) System.out.println("В массиве нет соседних нечетных чисел.");
        }

//На 7-е место одномерного массива целых чисел вставить число, равное квадрату первого элемента.
    public static void task4() {
        int[] before = new int[10];
        for (int i = 0; i < before.length; i++) {
            before[i] = (int) Math.round((Math.random() * 30));
            int pos = 7;
            int elem = (int) Math.pow(before[0], 2);
            System.out.println(before[i]);
            int[] after = new int[before.length + 1];
            after[pos-1] = elem;
            System.out.println("Before:" + before[i]);
            System.out.println("After:" + after[i]);
        }
    }

//Задан массив с количеством элементов N. Сформировать два массива: в первый включить элементы исходного массива с четными номерами, а во второй — с нечетными.
    public static void task5() {

        Scanner scanner = new Scanner(System.in);
        System.out.println("Введите размер массива:");

        int n = 0;

        while (n <= 3) {
            if (scanner.hasNextInt()) {
                n = scanner.nextInt();
                if (n <= 3) {
                    System.out.println("Введенное число должно быть больше 3. Повторите ввод:");
                }
            } else {
                System.out.println("Вы ввели не число. Повторите ввод:");
                scanner.next();
            }
        }
        int[] array1 = new int[n];
        int nums = 0;

        for (int i = 0; i < n; i++) {
            array1[i] = (int) (Math.random() * (n + 1));
            if (array1[i] % 2 == 0) {
                nums++;
            }
        }

        System.out.println(Arrays.toString(array1));
        int[] array2 = new int[nums];
        int index = 0;
        for (int i = 0; i < n; i++) {
            if (array1[i] % 2 == 0) {
                array2[index] = array1[i];
                index++;
            }
        }
        System.out.println(Arrays.toString(array2));
    }
}
